{"version":3,"sources":["webpack:///../src/lists/custom-listview.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,mTACA,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,oBADR,qBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,kyBA0BL,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kjC,sMAuCTJ,EAAWK,gBAAiB","file":"component---src-lists-custom-listview-mdx-a9beccb1833be5543d6a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this example, you will find the code that could help you implement a custom listview based on a layout that you coded yourself. We simply get the data from a SampleDataProvider and then we sort the data provided and display it in the custom listview using a custom array adapter.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <h3 {...{\n      \"id\": \"mainactivityjava\"\n    }}>{`MainActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainActivity extends AppCompatActivity {\n\n    List<DataItem> dataItemList = SampleDataProvider.dataItemList;\n    List<String> itemNames = new ArrayList<>();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Collections.sort(dataItemList, new Comparator<DataItem>() {\n            @Override\n            public int compare(DataItem o1, DataItem o2) {\n                return o1.getItemName().compareTo(o2.getItemName());\n            }\n        });\n\n        DataItemAdapter adapter = new DataItemAdapter(this, dataItemList);\n\n        ListView listView = (ListView) findViewById(android.R.id.list);\n        listView.setAdapter(adapter);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dataitemadapterjava\"\n    }}>{`DataItemAdapter.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class DataItemAdapter extends ArrayAdapter<DataItem> {\n\n    List<DataItem> mDataItems;\n    LayoutInflater mInflater;\n\n    public DataItemAdapter(Context context, List<DataItem> objects) {\n        super(context, R.layout.list_item, objects);\n\n        mDataItems = objects;\n        mInflater = LayoutInflater.from(context);\n    }\n\n    @NonNull\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        // This is important to prevent re-initializing the cell in case it has\n        // been already inflated.\n        if (convertView == null) {\n            convertView = mInflater.inflate(R.layout.list_item, parent, false);\n        }\n\n        TextView tvName = (TextView) convertView.findViewById(R.id.itemNameText);\n        ImageView imageView = (ImageView) convertView.findViewById(R.id.imageView);\n\n        DataItem item = mDataItems.get(position);\n\n        tvName.setText(item.getItemName());\n        imageView.setImageResource(R.drawable.apple_pie);\n\n        return convertView;\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}