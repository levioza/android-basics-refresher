(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{PqiO:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return c}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk");var n=a("/FXl"),i=a("TjRS");a("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lists/custom-listview.mdx"}});var s={_frontmatter:o},m=i.a;function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,["components"]);return Object(n.b)(m,r({},s,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"description"},"Description"),Object(n.b)("p",null,"In this example, you will find the code that could help you implement a custom listview based on a layout that you coded yourself. We simply get the data from a SampleDataProvider and then we sort the data provided and display it in the custom listview using a custom array adapter."),Object(n.b)("h2",{id:"code"},"Code"),Object(n.b)("h3",{id:"mainactivityjava"},"MainActivity.java"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-java"}),"public class MainActivity extends AppCompatActivity {\n\n    List<DataItem> dataItemList = SampleDataProvider.dataItemList;\n    List<String> itemNames = new ArrayList<>();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Collections.sort(dataItemList, new Comparator<DataItem>() {\n            @Override\n            public int compare(DataItem o1, DataItem o2) {\n                return o1.getItemName().compareTo(o2.getItemName());\n            }\n        });\n\n        DataItemAdapter adapter = new DataItemAdapter(this, dataItemList);\n\n        ListView listView = (ListView) findViewById(android.R.id.list);\n        listView.setAdapter(adapter);\n    }\n}\n")),Object(n.b)("h3",{id:"dataitemadapterjava"},"DataItemAdapter.java"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-java"}),"public class DataItemAdapter extends ArrayAdapter<DataItem> {\n\n    List<DataItem> mDataItems;\n    LayoutInflater mInflater;\n\n    public DataItemAdapter(Context context, List<DataItem> objects) {\n        super(context, R.layout.list_item, objects);\n\n        mDataItems = objects;\n        mInflater = LayoutInflater.from(context);\n    }\n\n    @NonNull\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        // This is important to prevent re-initializing the cell in case it has\n        // been already inflated.\n        if (convertView == null) {\n            convertView = mInflater.inflate(R.layout.list_item, parent, false);\n        }\n\n        TextView tvName = (TextView) convertView.findViewById(R.id.itemNameText);\n        ImageView imageView = (ImageView) convertView.findViewById(R.id.imageView);\n\n        DataItem item = mDataItems.get(position);\n\n        tvName.setText(item.getItemName());\n        imageView.setImageResource(R.drawable.apple_pie);\n\n        return convertView;\n    }\n}\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lists/custom-listview.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lists-custom-listview-mdx-a9beccb1833be5543d6a.js.map