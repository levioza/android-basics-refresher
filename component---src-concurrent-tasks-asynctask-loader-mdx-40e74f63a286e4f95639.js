(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{NGun:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return d}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var r=t("/FXl"),a=t("TjRS");t("aD51");function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/concurrent-tasks/asynctask-loader.mdx"}});var c={_frontmatter:o},l=a.a;function d(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(l,i({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"description"},"Description"),Object(r.b)("p",null,"In this example, we use a loader to perform a task in the background."),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)("h3",{id:"mainactivityjava"},"MainActivity.java"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-java"}),'public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<String> {\n\n    TextView output;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        output = (TextView) findViewById(R.id.output);\n    }\n\n    public void runClickHandler(View view) {\n        getSupportLoaderManager().initLoader(0, null, this).forceLoad();\n    }\n\n    public void clearClickHandler(View view) {\n        output.setText("");\n    }\n\n    @NonNull\n    @Override\n    public Loader<String> onCreateLoader(int i, @Nullable Bundle bundle) {\n        return new MyTaskLoader(this);\n    }\n\n    @Override\n    public void onLoadFinished(@NonNull Loader<String> loader, String o) {\n        output.append("Loader finished, returned: " + o + "\\n");\n    }\n\n    @Override\n    public void onLoaderReset(@NonNull Loader<String> loader) {}\n\n    private static class MyTaskLoader extends AsyncTaskLoader<String> {\n\n        public MyTaskLoader(@NonNull Context context) {\n            super(context);\n        }\n\n        @Nullable\n        @Override\n        public String loadInBackground() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return "From the loader";\n        }\n    }\n}\n')))}d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/concurrent-tasks/asynctask-loader.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-concurrent-tasks-asynctask-loader-mdx-40e74f63a286e4f95639.js.map