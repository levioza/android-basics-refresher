{"version":3,"sources":["webpack:///../src/concurrent-tasks/intent-service.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,yNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,uGACA,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,oBADR,qBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,m1CA2CL,iBAAQ,CACN,GAAM,iBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2pC,gNA+CTJ,EAAWK,gBAAiB","file":"component---src-concurrent-tasks-intent-service-mdx-e1e530f11ff421ffe2cb.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this example, we use an intent service to perform a task in the background.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <h3 {...{\n      \"id\": \"mainactivityjava\"\n    }}>{`MainActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainActivity extends AppCompatActivity {\n\n    private static final String JSON_URL =\n            \"https://jsonplaceholder.typicode.com/users\";\n    TextView output;\n\n    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String message = intent.getStringExtra(MyService.MY_SERVICE_PAYLOAD);\n            output.append(message + \"\\\\n\");\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        output = (TextView) findViewById(R.id.output);\n\n        LocalBroadcastManager.getInstance(getApplicationContext()).registerReceiver(mBroadcastReceiver, new IntentFilter(MyService.My_SERVICE_MESSAGE));\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        LocalBroadcastManager.getInstance(getApplicationContext()).unregisterReceiver(mBroadcastReceiver);\n    }\n\n    public void runClickHandler(View view) {\n        Intent intent = new Intent(this, MyService.class);\n        intent.setData(Uri.parse(JSON_URL));\n        startService(intent);\n    }\n\n    public void clearClickHandler(View view) {\n        output.setText(\"\");\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"myservicejava\"\n    }}>{`MyService.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MyService extends IntentService {\n\n    public static final String TAG = \"MyService\";\n    public static final String My_SERVICE_MESSAGE = \"myServiceMessage\";\n    public static final String MY_SERVICE_PAYLOAD = \"myServicePayload\";\n\n    public MyService() {\n        super(\"MyService\");\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        Uri uri = intent.getData();\n        Log.i(TAG, \"onHandleIntent: \" + uri.toString());\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        Intent messageIntent = new Intent(My_SERVICE_MESSAGE);\n        messageIntent.putExtra(MY_SERVICE_PAYLOAD, \"Service all done!\");\n        LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(getApplicationContext());\n\n        localBroadcastManager.sendBroadcast(messageIntent);\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"onCreate\");\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(TAG, \"onDestroy\");\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}