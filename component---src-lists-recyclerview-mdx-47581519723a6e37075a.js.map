{"version":3,"sources":["webpack:///../src/lists/recyclerview.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,8UACA,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,oBADR,qBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,0yBA0BL,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,s+E,mMAgFTJ,EAAWK,gBAAiB","file":"component---src-lists-recyclerview-mdx-47581519723a6e37075a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this example, you will find the code that could help you implement a recyclerview based on a layout that you coded yourself. We simply get the data from a SampleDataProvider and then we sort the data provided and display it in the recyclerView using a custom adapter that implements the viewholder pattern.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <h3 {...{\n      \"id\": \"mainactivityjava\"\n    }}>{`MainActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainActivity extends AppCompatActivity {\n\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    List<DataItem> dataItemList = SampleDataProvider.dataItemList;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Collections.sort(dataItemList, new Comparator<DataItem>() {\n            @Override\n            public int compare(DataItem item, DataItem t1) {\n                return item.getItemName().compareTo(t1.getItemName());\n            }\n        });\n\n        DataItemAdapter adapter = new DataItemAdapter(this, dataItemList);\n\n        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.rvItems);\n        recyclerView.setAdapter(adapter);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dataitemadapterjava\"\n    }}>{`DataItemAdapter.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class DataItemAdapter extends RecyclerView.Adapter<DataItemAdapter.ViewHolder> {\n\n    public static final String ITEM_KEY = \"ITEM_KEY\";\n    private List<DataItem> mItems;\n    private Context mContext;\n\n    public DataItemAdapter(Context context, List<DataItem> items) {\n\n        this.mContext = context;\n        this.mItems = items;\n    }\n\n    @Override\n    public DataItemAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        LayoutInflater inflater = LayoutInflater.from(mContext);\n        View itemView = inflater.inflate(R.layout.list_item, parent, false);\n        ViewHolder viewHolder = new ViewHolder(itemView);\n        return viewHolder;\n    }\n\n    @Override\n    public void onBindViewHolder(DataItemAdapter.ViewHolder holder, int position) {\n        final DataItem item = mItems.get(position);\n\n        try {\n            holder.tvName.setText(item.getItemName());\n            String imageFile = item.getImage();\n            InputStream inputStream = mContext.getAssets().open(imageFile);\n            Drawable d = Drawable.createFromStream(inputStream, null);\n            holder.imageView.setImageDrawable(d);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        holder.mView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String itemId = item.getItemId();\n                Intent intent = new Intent(mContext, DetailActivity.class);\n                intent.putExtra(ITEM_KEY, item);\n                mContext.startActivity(intent);\n            }\n        });\n\n        holder.mView.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                Toast.makeText(mContext, \"You longed clicked \" + item.getItemName(), Toast.LENGTH_SHORT).show();\n                return false;\n            }\n        });\n    }\n\n    @Override\n    public int getItemCount() {\n        return mItems.size();\n    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder {\n\n        public TextView tvName;\n        public ImageView imageView;\n        public View mView;\n\n        public ViewHolder(View itemView) {\n            super(itemView);\n\n            tvName = (TextView) itemView.findViewById(R.id.itemNameText);\n            imageView = (ImageView) itemView.findViewById(R.id.imageView);\n            mView = itemView;\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}