{"version":3,"sources":["webpack:///../src/fragments/dialog-in-a-fragment.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,8FACA,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,sBADR,uBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,0qBAqBL,iBAAQ,CACN,GAAM,oBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+4B,+MAgCTJ,EAAWK,gBAAiB","file":"component---src-fragments-dialog-in-a-fragment-mdx-062357b11f8f552a5a05.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this example, we can see how to create a dialog inside a fragment.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <h3 {...{\n      \"id\": \"dialogfragmentjava\"\n    }}>{`DialogFragment.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class AlertDialogFragment extends DialogFragment {\n\n    @NonNull\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n\n        AlertDialog alertDialog = new AlertDialog.Builder(getActivity()).create();\n        alertDialog.setTitle(\"Alert\");\n        alertDialog.setMessage(\"Here's some important information!\");\n        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"OK\",\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                    }\n                });\n        return alertDialog;\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mainactivityjava\"\n    }}>{`MainActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        if (fab == null) throw new AssertionError();\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                showDialog();\n            }\n        });\n    }\n\n    private void showDialog() {\n        AlertDialogFragment dialogFragment = new AlertDialogFragment();\n        dialogFragment.setCancelable(false);\n        dialogFragment.show(getSupportFragmentManager(), \"DIALOG_FRAGMENT\");\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}