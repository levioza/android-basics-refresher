(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"9vmn":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return u}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var r=t("/FXl"),a=t("TjRS");t("aD51");function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/concurrent-tasks/asynctask.mdx"}});var s={_frontmatter:o},c=a.a;function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(c,i({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"description"},"Description"),Object(r.b)("p",null,"In this example, we use an async task to perform a task in the background. Here, append a string to a textview every second."),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)("h3",{id:"mainactivityjava"},"MainActivity.java"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-java"}),'public class MainActivity extends AppCompatActivity {\n\n    TextView output;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        output = (TextView) findViewById(R.id.output);\n    }\n\n    public void runClickHandler(View view) {\n        MyAsyncTask task = new MyAsyncTask();\n        task.execute("string 1", "string 2", "string 3");\n    }\n\n    public void clearClickHandler(View view) {\n        output.setText("");\n    }\n\n    private class MyAsyncTask extends AsyncTask<String, String, Void> {\n\n        @Override\n        protected Void doInBackground(String... strings) {\n            for (String string: strings) {\n                publishProgress(string);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            return null;\n        }\n\n        @Override\n        protected void onProgressUpdate(String... values) {\n            super.onProgressUpdate(values);\n            output.append(values[0] + "\\n");\n        }\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n\n        @Override\n        protected void onPostExecute(Void aVoid) {\n            super.onPostExecute(aVoid);\n        }\n    }\n}\n')))}u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/concurrent-tasks/asynctask.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-concurrent-tasks-asynctask-mdx-6e9f79744b0237d085de.js.map