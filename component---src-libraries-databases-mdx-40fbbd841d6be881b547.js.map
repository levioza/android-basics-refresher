{"version":3,"sources":["webpack:///../src/libraries/databases.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iIACA,iBAAQ,CACN,GAAM,aADR,aAGA,iBAAQ,CACN,GAAM,cACL,mBAAGC,WAAW,MAAS,CACtB,KAAQ,sCADT,eAGH,2NACA,iBAAQ,CACN,GAAM,4BACL,mBAAGA,WAAW,MAAS,CACtB,KAAQ,oEADT,6BAGH,0LACA,iBAAQ,CACN,GAAM,cADR,cAGA,+BAAe,mBAAGA,WAAW,KAAQ,CACjC,KAAQ,sCADG,qCAAf,sCAGA,+BAAe,mBAAGA,WAAW,KAAQ,CACjC,KAAQ,oEADG,mEAAf,uC,oMAOJJ,EAAWK,gBAAiB","file":"component---src-libraries-databases-mdx-40fbbd841d6be881b547.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this page, I provide references to the libraries that could help in storing data in a local database.`}</p>\n    <h2 {...{\n      \"id\": \"libraries\"\n    }}>{`Libraries`}</h2>\n    <h3 {...{\n      \"id\": \"realm-java\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"https://realm.io/docs/java/latest\"\n      }}>{`Realm Java`}</a></h3>\n    <p>{`Realm Database is an alternative to SQLite. Thanks to its zero-copy design, Realm Database is much faster than an ORM, and often faster than raw SQLite. Get started in minutes, not hours. `}{`[1]`}</p>\n    <h3 {...{\n      \"id\": \"room-persistence-library\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"https://developer.android.com/topic/libraries/architecture/room\"\n      }}>{`Room Persistence Library`}</a></h3>\n    <p>{`The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite. `}{`[2]`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <p>{`[1]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://realm.io/docs/java/latest\"\n      }}>{`https://realm.io/docs/java/latest`}</a>{`, Accessed 30th of December, 2019.`}</p>\n    <p>{`[2]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/topic/libraries/architecture/room\"\n      }}>{`https://developer.android.com/topic/libraries/architecture/room`}</a>{`, Accessed 30th of December, 2019.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}