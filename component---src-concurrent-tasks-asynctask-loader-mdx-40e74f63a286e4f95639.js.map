{"version":3,"sources":["webpack:///../src/concurrent-tasks/asynctask-loader.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,8FACA,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,oBADR,qBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,s7C,kNA2DTJ,EAAWK,gBAAiB","file":"component---src-concurrent-tasks-asynctask-loader-mdx-40e74f63a286e4f95639.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this example, we use a loader to perform a task in the background.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <h3 {...{\n      \"id\": \"mainactivityjava\"\n    }}>{`MainActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<String> {\n\n    TextView output;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        output = (TextView) findViewById(R.id.output);\n    }\n\n    public void runClickHandler(View view) {\n        getSupportLoaderManager().initLoader(0, null, this).forceLoad();\n    }\n\n    public void clearClickHandler(View view) {\n        output.setText(\"\");\n    }\n\n    @NonNull\n    @Override\n    public Loader<String> onCreateLoader(int i, @Nullable Bundle bundle) {\n        return new MyTaskLoader(this);\n    }\n\n    @Override\n    public void onLoadFinished(@NonNull Loader<String> loader, String o) {\n        output.append(\"Loader finished, returned: \" + o + \"\\\\n\");\n    }\n\n    @Override\n    public void onLoaderReset(@NonNull Loader<String> loader) {}\n\n    private static class MyTaskLoader extends AsyncTaskLoader<String> {\n\n        public MyTaskLoader(@NonNull Context context) {\n            super(context);\n        }\n\n        @Nullable\n        @Override\n        public String loadInBackground() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"From the loader\";\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}