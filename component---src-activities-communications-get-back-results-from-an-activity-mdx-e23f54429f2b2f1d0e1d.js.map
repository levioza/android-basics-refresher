{"version":3,"sources":["webpack:///../src/activities-communications/get-back-results-from-an-activity.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,qPAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,yLAAwK,0BAAYC,WAAW,KAAvB,kDAAxK,wGAA2W,0BAAYA,WAAW,KAAvB,oBAA3W,gHAAwhB,0BAAYA,WAAW,KAAvB,sCAAxhB,mGAA0sB,0BAAYA,WAAW,KAAvB,aAA1sB,UAA0wB,0BAAYA,WAAW,KAAvB,oBAA1wB,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,oBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,ivCAwCL,iBAAQ,CACN,GAAM,sBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wyE,4OA8ETJ,EAAWK,gBAAiB","file":"component---src-activities-communications-get-back-results-from-an-activity-mdx-e23f54429f2b2f1d0e1d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/levioza/android-basics-refresher/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h1>\n    <p>{`In this example, we can find how to pass data from an activity to a previous activity while preparing the activity that will recieve the feedback by calling the `}<inlineCode parentName=\"p\">{`startActivityForResult(intent, SIGNIN_REQUEST)`}</inlineCode>{` with a request number that would identify the session bewtween 2 activities and by implementing the `}<inlineCode parentName=\"p\">{`onActivityResult`}</inlineCode>{` method. The activity that would send the feedback would need to package the intent and set the result using `}<inlineCode parentName=\"p\">{`setResult(RESULT_OK, getIntent());`}</inlineCode>{` and then it would be important to dismiss the activity to return to the previos activity using `}<inlineCode parentName=\"p\">{`finish();`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`onActivityResult`}</inlineCode>{` will get executed.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <h3 {...{\n      \"id\": \"mainactivityjava\"\n    }}>{`MainActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainActivity extends AppCompatActivity {\n\n    private static final int SIGNIN_REQUEST = 1001;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.action_signin:\n                Intent intent = new Intent(this, SigninActivity.class);\n                startActivityForResult(intent, SIGNIN_REQUEST);\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if (resultCode == RESULT_OK && requestCode == SIGNIN_REQUEST) {\n            String email = data.getStringExtra(SigninActivity.EMAIL_KEY);\n            Toast.makeText(this, \"You signed in as \" + email, Toast.LENGTH_SHORT).show();\n        }\n\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"signinactivityjava\"\n    }}>{`SignInActivity.java`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class SigninActivity extends AppCompatActivity  {\n\n    public static final String EMAIL_KEY = \"email_key\";\n    // UI references.\n    private TextView mEmailView;\n    private EditText mPasswordView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_signin);\n        mEmailView = (TextView) findViewById(R.id.email);\n        mPasswordView = (EditText) findViewById(R.id.password);\n        Button mEmailSignInButton = (Button) findViewById(R.id.sign_in_button);\n        mEmailSignInButton.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                attemptLogin();\n            }\n        });\n\n    }\n\n    private void attemptLogin() {\n\n        // Reset errors.\n        mEmailView.setError(null);\n        mPasswordView.setError(null);\n\n        // Store values at the time of the login attempt.\n        String email = mEmailView.getText().toString();\n        String password = mPasswordView.getText().toString();\n\n        boolean cancel = false;\n        View focusView = null;\n\n        // Check for a valid password, if the user entered one.\n        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {\n            mPasswordView.setError(getString(R.string.error_invalid_password));\n            focusView = mPasswordView;\n            cancel = true;\n        }\n\n        // Check for a valid email address.\n        if (TextUtils.isEmpty(email)) {\n            mEmailView.setError(getString(R.string.error_field_required));\n            focusView = mEmailView;\n            cancel = true;\n        } else if (!isEmailValid(email)) {\n            mEmailView.setError(getString(R.string.error_invalid_email));\n            focusView = mEmailView;\n            cancel = true;\n        }\n\n        if (cancel) {\n            focusView.requestFocus();\n        } else {\n            getIntent().putExtra(EMAIL_KEY, email);\n            setResult(RESULT_OK, getIntent());\n            finish();\n        }\n    }\n\n    private boolean isEmailValid(String email) {\n        return email.contains(\"@\");\n    }\n\n    private boolean isPasswordValid(String password) {\n        return password.length() > 4;\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}